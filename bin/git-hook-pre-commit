#!/bin/bash
# See http://www.davidpashley.com/articles/writing-robust-shell-scripts.html

# exit when encountering undeclared variables
set -u;

# exit when encountering a non-zero exit status
# (disabled here as we do are own checking)
# set -e;

BAIL=0;
TMP_FILE="/tmp/git-pre-commit.tmp";
JSLINT_EXEC=$(which jslint);
ORIG_DIR=$(pwd);
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd );
ROOT_DIR=$(cd "$(git rev-parse --show-toplevel)" && pwd );
NODEUNIT_EXEC="${ROOT_DIR}/node_modules/.bin/nodeunit";

if [ "$JSLINT_EXEC" = "" ]; then
  echo "Please install Node.js and JSLint (sudo npm install -g jslint)";
  exit 1;
fi

if [ "$NODEUNIT_EXEC" = "" ]; then
  echo "Please install Node.js and nodeunit (sudo npm install -g nodeunit)";
  exit 1;
fi

echo;
echo "JSLint test of updated or new *.js files ...";
echo "  We ignore third_party libraries in .../js/third_party/...";
git status \
  | grep '\s\+\(modified\|new file\)' \
  | grep '.js$' \
  | grep -v '/js/third_party/' \
  | grep -v 'tb-sp.js' \
  | grep -v uglifyjs \
  | cut -d ":" -f 2- \
  | while read LINE; do
      echo -en "  Check ${LINE}: ... "
      CHECK=$($JSLINT_EXEC $LINE);
      if [ "${CHECK}" != "" ] && ( echo ${CHECK} |grep -vq 'OK.$' );
      then
        echo "FAIL";
      else
        echo "pass";
      fi;
    done \
  | tee "${TMP_FILE}";

echo "JSlint test complete";

if grep -s 'FAIL' "${TMP_FILE}"; then
  echo "JSLint testing FAILED";
  echo "  Please use jslint to test the failed files and ";
  echo "  commit again once they pass the check.";
  exit 1;
fi
echo;

exit 0;

